#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# replace PACKAGENAME, EMAIL and PATH_TO_FEATURES_H as appropriate and add
# further checks as required
# running autoscan and then comparing configure.ac and configure.scan is very
# useful

AC_PREREQ(2.59)
AC_INIT([fshell2],[1.4.1],[michael.tautschnig@gmail.com])
AC_CONFIG_SRCDIR([config/update-makefiles.pl])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_MACRO_DIR([m4])
AC_CANONICAL_TARGET
# suppress -I. -I. -I../.., includes explicitly set
AM_INIT_AUTOMAKE([1.9 nostdinc foreign])

AC_SUBST(ac_aux_dir)
# something like AX_PREFIX_CONFIG_H(shared/config/features.h), whichever path
# you prefer
AX_PREFIX_CONFIG_H(fshell2/config/features.hpp)

AC_LANG([C++])

# Checks for programs.
model_LEX_YACC_CPLUSPLUS
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_AWK
AC_PROG_GREP
AC_PROG_EGREP
AC_PROG_SED
# no fortran here
F77=no
AC_PROG_LIBTOOL

model_UPDATE_MAKEFILES
model_DIAGNOSTICS
if test $DIAGNOSTICSLEVEL -ge 0 ; then
  AC_CHECK_HEADERS([diagnostics/basic_exceptions/low_level_exception.hpp], [],
                    AC_MSG_ERROR([diagnostics found in an outdated version]))
fi


AC_SUBST(additional_args)
additional_args="$additional_args --host=$host --target=$target"

AM_CONDITIONAL(WIN32_BUILD, test x$build_os = xmingw32)

# Checks for header files.
# essential headers
AC_CXX_HAVE_STL
if test "x$ac_cv_cxx_have_stl" != "xyes" ; then
  AC_MSG_ERROR([C++ standard template library not found])
fi
AC_CHECK_HEADERS([signal.h \
                  sys/stat.h \
                  ctime \
                  cerrno \
                  unistd.h \
                  zlib.h \
                  ],
                  [],
                  AC_MSG_ERROR([Essential header $ac_header missing]))

# platform specific or non-essential headers
AC_CHECK_HEADERS([FlexLexer.h \
                  tr1/unordered_map \
                  ext/hash_map \
                  ])

# Checks for library functions.
VL_LIB_READLINE
AM_CONDITIONAL(BUILD_LINENOISE, test "x$vl_cv_lib_readline" = "xno")

# Out-of-tree CBMC and MiniSat
AC_ARG_WITH(cbmc,
            [--with-cbmc=<path> path to CBMC build],
            [CBMCDIR=${with_cbmc}
             model_REALPATH([CBMCDIR])
             additional_args="$additional_args --with-cbmc=$CBMCDIR"],
            CBMCDIR='$(top_srcdir)/cbmc')
AC_SUBST(CBMCDIR)

AC_ARG_WITH(minisat,
            [--with-minisat=<path> path to MiniSat 2.2.0 build],
            [MINISATDIR=${with_minisat}
             model_REALPATH([MINISATDIR])
             additional_args="$additional_args --with-minisat=$MINISATDIR"],
            MINISATDIR='$(top_srcdir)/minisat-2.2.0')
AC_SUBST(MINISATDIR)


# Files generated by configure
AC_CONFIG_FILES([fshell2/util/Makefile
                 fshell2/fql/concepts/Makefile
                 fshell2/tc_generation/Makefile
                 fshell2/fql/evaluation/Makefile
                 fshell2/instrumentation/Makefile
                 fshell2/fql/normalize/Makefile
                 fshell2/fql/ast/Makefile
                 fshell2/main/Makefile
                 fshell2/macro/Makefile
                 fshell2/command/Makefile
                 fshell2/exception/Makefile
                 fshell2/fql/parser/Makefile
                 fshell2/fql/Makefile
                 fshell2/config/Makefile
                 fshell2/Makefile
                 Makefile
                 doc/Makefile
                 test/Makefile
		 doxygen.cfg
                 ])

DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(OFF)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(OFF)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN(PACKAGENAME, ${srcdir}/doxygen.cfg, doc/dx)

AC_OUTPUT
