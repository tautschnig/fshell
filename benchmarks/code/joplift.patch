diff -urN joplift/Makefile joplift.new/Makefile
--- joplift/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ joplift.new/Makefile	2010-11-25 20:07:50.000000000 +0100
@@ -0,0 +1,27 @@
+all: lift-rand lift-crest
+
+lift-rand: lift-rand.c
+	$(CC) $< -g -fprofile-arcs -ftest-coverage -o $@
+
+rand: lift-rand
+	rm -f lift-rand.gcda *.gcov
+	( time ./lift-rand 1000000 )
+	gcov -b ./lift-rand | egrep '^(File|Branches)'
+	rm -f lift-rand.gcda *.gcov
+	( time ./lift-rand 10 )
+	gcov -b ./lift-rand | egrep '^(File|Branches)'
+
+lift-crest: lift-crest.c
+	../../../scratch/crest-0.1.1/bin/crestc $<
+
+crest: lift-crest
+	( time ../../../scratch/crest-0.1.1/bin/run_crest ./lift-crest 10 -dfs 2>&1 | tail -1 )
+	( time ../../../scratch/crest-0.1.1/bin/run_crest ./lift-crest 5000 -dfs 2>&1 | tail -1 )
+
+clean:
+	rm -rf lift-rand lift-rand.gc* lift-rand.dSYM *.gcov
+	rm -f branches cfg cfg_branches cfg_func_map funcount idcount lift-crest
+	rm -f lift-crest.cil.c lift-crest.cil.i lift-crest.i lift-crest.o stmtcount
+	rm -f szd_execution coverage input
+
+.PHONY: all clean rand crest
diff -urN joplift/lift-crest.c joplift.new/lift-crest.c
--- joplift/lift-crest.c	1970-01-01 01:00:00.000000000 +0100
+++ joplift.new/lift-crest.c	2010-11-25 20:07:50.000000000 +0100
@@ -0,0 +1,1200 @@
+/* Generated by CIL v. 1.3.6 */
+/* print_CIL_Input is true */
+
+#line 1 "cil-Wzef8oRV.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-pHCjtUiZ.i","")
+#line 32 "lift_io.h"
+int ctrl_io_in[10] ;
+#line 33
+int ctrl_io_out[4] ;
+#line 35
+int ctrl_io_led[14] ;
+#line 44
+void io_init(void) ;
+#line 78 "lift_control.h"
+int levelPos[14]  ;
+#line 79 "lift_control.h"
+int one_level  ;
+#line 80 "lift_control.h"
+int cntValid  ;
+#line 81 "lift_control.h"
+int cnt  ;
+#line 82 "lift_control.h"
+int level  ;
+#line 83 "lift_control.h"
+int loadLevel  ;
+#line 84 "lift_control.h"
+int loadPending  ;
+#line 85 "lift_control.h"
+int loadSensor  ;
+#line 86 "lift_control.h"
+int cmd  ;
+#line 87 "lift_control.h"
+int timMotor  ;
+#line 88 "lift_control.h"
+int timImp  ;
+#line 89 "lift_control.h"
+int directionUp  ;
+#line 90 "lift_control.h"
+int lastImp  ;
+#line 91 "lift_control.h"
+int dbgCnt  ;
+#line 92 "lift_control.h"
+int endCnt  ;
+#line 95
+int checkRun(void) ;
+#line 96
+void waitForMotorStart(void) ;
+#line 97
+void doCmd(void) ;
+#line 98
+void doImpuls(int val , int motor , int reset ) ;
+#line 99
+void checkCmd(void) ;
+#line 100
+void checkLevel(void) ;
+#line 101
+void ctrl_loop(void) ;
+#line 202 "crest.h"
+extern void __CrestInt(int *x )  __attribute__((__crest_skip__)) ;
+#line 33 "lift_control.c"
+int newLevel  ;
+#line 88 "lift_control.c"
+void ctrl_init(void) 
+{ int i ;
+  int tmp ;
+  int tmp___0 ;
+  int tmp___1 ;
+  int tmp___2 ;
+  int tmp___3 ;
+  int tmp___4 ;
+  int tmp___5 ;
+  int tmp___6 ;
+  int tmp___7 ;
+  int tmp___8 ;
+  int tmp___9 ;
+  int tmp___10 ;
+  int tmp___11 ;
+  int tmp___12 ;
+  int tmp___13 ;
+  int tmp___14 ;
+
+  {
+#line 90
+  i = 0;
+#line 91
+  io_init();
+#line 92
+  __CrestInt(& cntValid);
+#line 93
+  __CrestInt(& cnt);
+#line 94
+  __CrestInt(& cmd);
+#line 95
+  __CrestInt(& timMotor);
+#line 96
+  __CrestInt(& timImp);
+#line 97
+  __CrestInt(& directionUp);
+#line 98
+  __CrestInt(& lastImp);
+#line 99
+  __CrestInt(& loadLevel);
+#line 100
+  __CrestInt(& loadPending);
+#line 101
+  __CrestInt(& loadSensor);
+#line 102
+  tmp = i;
+#line 102
+  i ++;
+#line 102
+  __CrestInt(& levelPos[tmp]);
+#line 103
+  tmp___0 = i;
+#line 103
+  i ++;
+#line 103
+  __CrestInt(& levelPos[tmp___0]);
+#line 104
+  tmp___1 = i;
+#line 104
+  i ++;
+#line 104
+  __CrestInt(& levelPos[tmp___1]);
+#line 105
+  tmp___2 = i;
+#line 105
+  i ++;
+#line 105
+  __CrestInt(& levelPos[tmp___2]);
+#line 106
+  tmp___3 = i;
+#line 106
+  i ++;
+#line 106
+  __CrestInt(& levelPos[tmp___3]);
+#line 107
+  tmp___4 = i;
+#line 107
+  i ++;
+#line 107
+  __CrestInt(& levelPos[tmp___4]);
+#line 108
+  tmp___5 = i;
+#line 108
+  i ++;
+#line 108
+  __CrestInt(& levelPos[tmp___5]);
+#line 109
+  tmp___6 = i;
+#line 109
+  i ++;
+#line 109
+  __CrestInt(& levelPos[tmp___6]);
+#line 110
+  tmp___7 = i;
+#line 110
+  i ++;
+#line 110
+  __CrestInt(& levelPos[tmp___7]);
+#line 111
+  tmp___8 = i;
+#line 111
+  i ++;
+#line 111
+  __CrestInt(& levelPos[tmp___8]);
+#line 112
+  tmp___9 = i;
+#line 112
+  i ++;
+#line 112
+  __CrestInt(& levelPos[tmp___9]);
+#line 113
+  tmp___10 = i;
+#line 113
+  i ++;
+#line 113
+  __CrestInt(& levelPos[tmp___10]);
+#line 114
+  tmp___11 = i;
+#line 114
+  i ++;
+#line 114
+  __CrestInt(& levelPos[tmp___11]);
+#line 115
+  tmp___12 = i;
+#line 115
+  i ++;
+#line 115
+  __CrestInt(& levelPos[tmp___12]);
+#line 116
+  tmp___13 = i;
+#line 116
+  i ++;
+#line 116
+  __CrestInt(& levelPos[tmp___13]);
+#line 117
+  tmp___14 = i;
+#line 117
+  i ++;
+#line 117
+  __CrestInt(& levelPos[tmp___14]);
+#line 118
+  one_level = levelPos[1];
+#line 119
+  return;
+}
+}
+#line 121 "lift_control.c"
+void ctrl_loop(void) 
+{ int checkLevel_i ;
+  int checkLevel_middle ;
+  int run ;
+
+  {
+#line 122
+  checkLevel_i = 0;
+#line 122
+  checkLevel_middle = 0;
+#line 122
+  run = 0;
+#line 124
+  if (cmd == 0) {
+#line 127
+    if (loadPending) {
+#line 128
+      if (ctrl_io_in[2]) {
+#line 129
+        cmd = 1;
+      }
+    } else {
+#line 131
+      if (ctrl_io_in[4]) {
+#line 132
+        if (! ctrl_io_in[1]) {
+#line 133
+          if (level != 14) {
+#line 134
+            cmd = 3;
+          }
+        }
+      } else {
+#line 137
+        if (ctrl_io_in[5]) {
+#line 138
+          if (! ctrl_io_in[2]) {
+#line 139
+            if (level != 1) {
+#line 140
+              cmd = 4;
+            }
+          }
+        } else {
+#line 143
+          if (ctrl_io_in[8]) {
+#line 144
+            if (loadLevel != 0) {
+#line 145
+              if (level < loadLevel) {
+#line 146
+                cmd = 1;
+              } else {
+#line 149
+                cmd = 2;
+              }
+            } else {
+#line 152
+              cmd = 2;
+            }
+#line 154
+            loadPending = 1;
+#line 155
+            loadSensor = 0;
+          } else {
+#line 156
+            if (ctrl_io_in[6]) {
+#line 157
+              if (! ctrl_io_in[1]) {
+#line 158
+                cmd = 1;
+              }
+            } else {
+#line 160
+              if (ctrl_io_in[7]) {
+#line 161
+                if (! ctrl_io_in[2]) {
+#line 162
+                  cmd = 2;
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+#line 165
+    if (cmd != 0) {
+#line 166
+      timMotor = 50;
+    }
+  } else {
+#line 173
+    if (ctrl_io_in[0]) {
+#line 174
+      if (! lastImp) {
+#line 175
+        if (ctrl_io_out[0]) {
+#line 176
+          if (directionUp) {
+#line 177
+            cnt ++;
+          } else {
+#line 179
+            cnt --;
+          }
+        } else {
+#line 182
+          if (timImp > 0) {
+#line 183
+            if (directionUp) {
+#line 184
+              cnt ++;
+            } else {
+#line 186
+              cnt --;
+            }
+          }
+        }
+      }
+    }
+#line 191
+    if (ctrl_io_in[2]) {
+#line 192
+      cnt = 0;
+#line 193
+      cntValid = 1;
+    }
+#line 195
+    lastImp = ctrl_io_in[0];
+#line 196
+    if (timImp > 0) {
+#line 197
+      timImp --;
+#line 198
+      if (timImp == 0) {
+#line 199
+        if (cmd != 0) {
+#line 200
+          cmd = 0;
+        }
+      }
+    }
+#line 207
+    if (timMotor > 0) {
+#line 209
+      timMotor --;
+#line 210
+      if (cmd == 3) {
+#line 211
+        directionUp = 1;
+      } else {
+#line 213
+        if (cmd == 1) {
+#line 214
+          directionUp = 1;
+        }
+      }
+#line 216
+      ctrl_io_out[1] = directionUp;
+#line 217
+      if (! cntValid) {
+#line 218
+        cnt = 0;
+#line 219
+        if (cmd == 3) {
+#line 220
+          endCnt = one_level;
+        } else {
+#line 222
+          endCnt = - one_level;
+        }
+      } else {
+#line 225
+        endCnt = cnt;
+#line 226
+        newLevel = -99;
+#line 227
+        if (cmd == 3) {
+#line 228
+          newLevel = level + 1;
+        } else {
+#line 229
+          if (cmd == 4) {
+#line 230
+            newLevel = level - 1;
+          }
+        }
+#line 232
+        newLevel --;
+#line 233
+        if (newLevel >= 0) {
+#line 234
+          if (newLevel < 14) {
+#line 235
+            endCnt = levelPos[newLevel];
+          }
+        }
+      }
+    } else {
+#line 241
+      run = 0;
+#line 243
+      if (cmd == 3) {
+#line 244
+        if (cnt < endCnt - 1) {
+#line 246
+          if (! ctrl_io_in[1]) {
+#line 247
+            run = 1;
+            goto RETURN_checkRun;
+          }
+        }
+      } else {
+#line 251
+        if (cmd == 4) {
+#line 252
+          if (cnt > endCnt + 1) {
+#line 254
+            if (! ctrl_io_in[2]) {
+#line 255
+              run = 1;
+              goto RETURN_checkRun;
+            }
+          }
+        } else {
+#line 259
+          if (cmd == 1) {
+#line 260
+            if (loadPending) {
+#line 261
+              if (ctrl_io_in[3]) {
+#line 263
+                loadLevel = level;
+#line 264
+                loadPending = 0;
+#line 265
+                run = 0;
+                goto RETURN_checkRun;
+              }
+            }
+#line 269
+            if (! ctrl_io_in[1]) {
+#line 271
+              run = 1;
+              goto RETURN_checkRun;
+            }
+#line 275
+            loadPending = 0;
+          } else {
+#line 276
+            if (cmd == 2) {
+#line 277
+              if (loadPending) {
+#line 278
+                if (loadSensor) {
+#line 279
+                  if (! ctrl_io_in[3]) {
+#line 280
+                    loadSensor = 0;
+#line 282
+                    loadPending = 0;
+#line 283
+                    loadLevel = level;
+#line 284
+                    run = 0;
+                    goto RETURN_checkRun;
+                  }
+                }
+#line 288
+                loadSensor = ctrl_io_in[3];
+              }
+#line 290
+              if (! ctrl_io_in[2]) {
+#line 292
+                run = 1;
+                goto RETURN_checkRun;
+              }
+            }
+          }
+        }
+      }
+#line 296
+      run = 0;
+      RETURN_checkRun: 
+#line 300
+      if (ctrl_io_out[0]) {
+#line 301
+        if (! run) {
+#line 303
+          cmd = 99;
+#line 304
+          timImp = 50;
+        }
+      }
+#line 307
+      ctrl_io_out[0] = run;
+    }
+  }
+#line 314
+  checkLevel_middle = one_level >> 2;
+#line 315
+  if (cntValid) {
+#line 316
+    level = 1;
+#line 317
+    while (level < 14) {
+#line 318
+      if (cnt < levelPos[level] - checkLevel_middle) {
+#line 319
+        break;
+      }
+#line 321
+      level ++;
+    }
+  } else {
+#line 324
+    level = 0;
+  }
+#line 326
+  checkLevel_i = 0;
+#line 327
+  while (checkLevel_i < 14) {
+#line 328
+    ctrl_io_led[checkLevel_i] = checkLevel_i == level - 1;
+#line 329
+    checkLevel_i ++;
+  }
+#line 333
+  ctrl_io_led[13] = (dbgCnt & 128) != 0;
+#line 334
+  dbgCnt ++;
+#line 341
+  return;
+}
+}
+#line 347 "lift_control.c"
+void checkLevel(void) 
+{ int i ;
+  int middle ;
+
+  {
+#line 349
+  i = 0;
+#line 350
+  middle = one_level >> 2;
+#line 351
+  if (cntValid) {
+#line 352
+    level = 1;
+#line 352
+    while (level < 14) {
+#line 353
+      if (cnt < levelPos[level] - middle) {
+#line 354
+        break;
+      }
+#line 352
+      level ++;
+    }
+  } else {
+#line 358
+    level = 0;
+  }
+#line 360
+  i = 0;
+#line 360
+  while (i < 14) {
+#line 361
+    ctrl_io_led[i] = i == level - 1;
+#line 360
+    i ++;
+  }
+#line 363
+  return;
+}
+}
+#line 368 "lift_control.c"
+void checkCmd(void) 
+{ 
+
+  {
+#line 371
+  if (loadPending) {
+#line 372
+    if (ctrl_io_in[2]) {
+#line 373
+      cmd = 1;
+    }
+  } else {
+#line 375
+    if (ctrl_io_in[4]) {
+#line 376
+      if (! ctrl_io_in[1]) {
+#line 376
+        if (level != 14) {
+#line 377
+          cmd = 3;
+        }
+      }
+    } else {
+#line 379
+      if (ctrl_io_in[5]) {
+#line 380
+        if (! ctrl_io_in[2]) {
+#line 380
+          if (level != 1) {
+#line 381
+            cmd = 4;
+          }
+        }
+      } else {
+#line 383
+        if (ctrl_io_in[8]) {
+#line 384
+          if (loadLevel != 0) {
+#line 384
+            if (level < loadLevel) {
+#line 385
+              cmd = 1;
+            } else {
+#line 387
+              cmd = 2;
+            }
+          } else {
+#line 387
+            cmd = 2;
+          }
+#line 389
+          loadPending = 1;
+#line 390
+          loadSensor = 0;
+        } else {
+#line 391
+          if (ctrl_io_in[6]) {
+#line 392
+            if (! ctrl_io_in[1]) {
+#line 393
+              cmd = 1;
+            }
+          } else {
+#line 395
+            if (ctrl_io_in[7]) {
+#line 396
+              if (! ctrl_io_in[2]) {
+#line 397
+                cmd = 2;
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+#line 400
+  if (cmd != 0) {
+#line 401
+    timMotor = 50;
+  }
+#line 403
+  return;
+}
+}
+#line 405 "lift_control.c"
+void doImpuls(int val , int motor , int reset ) 
+{ 
+
+  {
+#line 407
+  if (val) {
+#line 407
+    if (! lastImp) {
+#line 408
+      if (motor) {
+        goto _L;
+      } else {
+#line 408
+        if (timImp > 0) {
+          _L: /* CIL Label */ 
+#line 409
+          if (directionUp) {
+#line 410
+            cnt ++;
+          } else {
+#line 412
+            cnt --;
+          }
+        }
+      }
+    }
+  }
+#line 416
+  if (reset) {
+#line 417
+    cnt = 0;
+#line 418
+    cntValid = 1;
+  }
+#line 420
+  lastImp = val;
+#line 421
+  if (timImp > 0) {
+#line 422
+    timImp --;
+#line 423
+    if (timImp == 0) {
+#line 423
+      if (cmd != 0) {
+#line 424
+        cmd = 0;
+      }
+    }
+  }
+#line 427
+  return;
+}
+}
+#line 430 "lift_control.c"
+void doCmd(void) 
+{ int tmp ;
+  int run ;
+
+  {
+#line 432
+  if (timMotor > 0) {
+#line 434
+    timMotor --;
+#line 435
+    if (cmd == 3) {
+#line 435
+      tmp = 1;
+    } else {
+#line 435
+      if (cmd == 1) {
+#line 435
+        tmp = 1;
+      } else {
+#line 435
+        tmp = 0;
+      }
+    }
+#line 435
+    directionUp = tmp;
+#line 436
+    ctrl_io_out[1] = directionUp;
+#line 437
+    if (! cntValid) {
+#line 438
+      cnt = 0;
+#line 439
+      if (cmd == 3) {
+#line 440
+        endCnt = one_level;
+      } else {
+#line 442
+        endCnt = - one_level;
+      }
+    } else {
+#line 445
+      endCnt = cnt;
+#line 446
+      newLevel = -99;
+#line 447
+      if (cmd == 3) {
+#line 448
+        newLevel = level + 1;
+      } else {
+#line 449
+        if (cmd == 4) {
+#line 450
+          newLevel = level - 1;
+        }
+      }
+#line 452
+      newLevel --;
+#line 453
+      if (newLevel >= 0) {
+#line 453
+        if (newLevel < 14) {
+#line 454
+          endCnt = levelPos[newLevel];
+        }
+      }
+    }
+  } else {
+#line 458
+    run = 0;
+#line 460
+    if (cmd == 3) {
+#line 461
+      if (cnt < endCnt - 1) {
+#line 461
+        if (! ctrl_io_in[1]) {
+#line 462
+          run = 1;
+        }
+      }
+    } else {
+#line 463
+      if (cmd == 4) {
+#line 464
+        if (cnt > endCnt + 1) {
+#line 464
+          if (! ctrl_io_in[2]) {
+#line 465
+            run = 1;
+          }
+        }
+      } else {
+#line 466
+        if (cmd == 1) {
+#line 467
+          if (loadPending) {
+#line 467
+            if (ctrl_io_in[3]) {
+#line 469
+              loadLevel = level;
+#line 470
+              loadPending = 0;
+#line 471
+              run = 0;
+            }
+          }
+#line 473
+          if (! ctrl_io_in[1]) {
+#line 474
+            run = 1;
+          }
+#line 476
+          loadPending = 0;
+        } else {
+#line 477
+          if (cmd == 2) {
+#line 478
+            if (loadPending) {
+#line 479
+              if (loadSensor) {
+#line 480
+                if (! ctrl_io_in[3]) {
+#line 481
+                  loadSensor = 0;
+#line 483
+                  loadPending = 0;
+#line 484
+                  loadLevel = level;
+#line 485
+                  run = 0;
+                }
+              }
+#line 488
+              loadSensor = ctrl_io_in[3];
+            }
+#line 490
+            if (! ctrl_io_in[2]) {
+#line 491
+              run = 1;
+            }
+          }
+        }
+      }
+    }
+#line 493
+    run = 0;
+#line 496
+    if (ctrl_io_out[0]) {
+#line 496
+      if (! run) {
+#line 498
+        cmd = 99;
+#line 499
+        timImp = 50;
+      }
+    }
+#line 501
+    ctrl_io_out[0] = run;
+  }
+#line 503
+  return;
+}
+}
+#line 505 "lift_control.c"
+void waitForMotorStart(void) 
+{ int tmp ;
+
+  {
+#line 507
+  timMotor --;
+#line 508
+  if (cmd == 3) {
+#line 508
+    tmp = 1;
+  } else {
+#line 508
+    if (cmd == 1) {
+#line 508
+      tmp = 1;
+    } else {
+#line 508
+      tmp = 0;
+    }
+  }
+#line 508
+  directionUp = tmp;
+#line 509
+  ctrl_io_out[1] = directionUp;
+#line 510
+  if (! cntValid) {
+#line 511
+    cnt = 0;
+#line 512
+    if (cmd == 3) {
+#line 513
+      endCnt = one_level;
+    } else {
+#line 515
+      endCnt = - one_level;
+    }
+  } else {
+#line 518
+    endCnt = cnt;
+#line 519
+    newLevel = -99;
+#line 520
+    if (cmd == 3) {
+#line 521
+      newLevel = level + 1;
+    } else {
+#line 522
+      if (cmd == 4) {
+#line 523
+        newLevel = level - 1;
+      }
+    }
+#line 525
+    newLevel --;
+#line 526
+    if (newLevel >= 0) {
+#line 526
+      if (newLevel < 14) {
+#line 527
+        endCnt = levelPos[newLevel];
+      }
+    }
+  }
+#line 530
+  return;
+}
+}
+#line 532 "lift_control.c"
+int checkRun(void) 
+{ 
+
+  {
+#line 534
+  if (cmd == 3) {
+#line 535
+    if (cnt < endCnt - 1) {
+#line 535
+      if (! ctrl_io_in[1]) {
+#line 536
+        return (1);
+      }
+    }
+  } else {
+#line 537
+    if (cmd == 4) {
+#line 538
+      if (cnt > endCnt + 1) {
+#line 538
+        if (! ctrl_io_in[2]) {
+#line 539
+          return (1);
+        }
+      }
+    } else {
+#line 540
+      if (cmd == 1) {
+#line 541
+        if (loadPending) {
+#line 541
+          if (ctrl_io_in[3]) {
+#line 543
+            loadLevel = level;
+#line 544
+            loadPending = 0;
+#line 545
+            return (0);
+          }
+        }
+#line 547
+        if (! ctrl_io_in[1]) {
+#line 548
+          return (1);
+        }
+#line 550
+        loadPending = 0;
+      } else {
+#line 551
+        if (cmd == 2) {
+#line 552
+          if (loadPending) {
+#line 553
+            if (loadSensor) {
+#line 554
+              if (! ctrl_io_in[3]) {
+#line 555
+                loadSensor = 0;
+#line 557
+                loadPending = 0;
+#line 558
+                loadLevel = level;
+#line 559
+                return (0);
+              }
+            }
+#line 562
+            loadSensor = ctrl_io_in[3];
+          }
+#line 564
+          if (! ctrl_io_in[2]) {
+#line 565
+            return (1);
+          }
+        }
+      }
+    }
+  }
+#line 567
+  return (0);
+}
+}
+#line 1 "cil-VW0xGFO5.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-rwNZ36Gq.i","")
+#line 32 "lift_io.h"
+int ctrl_io_in[10]  ;
+#line 33 "lift_io.h"
+int ctrl_io_out[4]  ;
+#line 34 "lift_io.h"
+int ctrl_io_analog[4]  ;
+#line 35 "lift_io.h"
+int ctrl_io_led[14]  ;
+#line 36 "lift_io.h"
+int ctrl_dly1  ;
+#line 36 "lift_io.h"
+int ctrl_dly2  ;
+#line 39 "lift_io.h"
+int volatile   simio_in  ;
+#line 40 "lift_io.h"
+int volatile   simio_out  ;
+#line 41 "lift_io.h"
+int volatile   simio_led  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc1  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc2  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc3  ;
+#line 45
+void ctrl_get_vals(void) ;
+#line 46
+void ctrl_set_vals(void) ;
+#line 42 "lift_io.c"
+void io_init(void) 
+{ 
+
+  {
+#line 44
+  __CrestInt(& ctrl_dly1);
+#line 45
+  __CrestInt(& ctrl_dly2);
+#line 46
+  return;
+}
+}
+#line 48 "lift_io.c"
+void ctrl_set_vals(void) 
+{ int val ;
+  int i ;
+
+  {
+#line 49
+  val = 0;
+#line 49
+  i = 3;
+#line 51
+  while (i >= 0) {
+#line 52
+    val <<= 1;
+#line 53
+    if (ctrl_io_out[i]) {
+#line 54
+      val |= 1;
+    }
+#line 56
+    i --;
+  }
+#line 58
+  simio_out = (int volatile   )val;
+#line 59
+  i = 13;
+#line 60
+  while (i >= 0) {
+#line 61
+    val <<= 1;
+#line 62
+    if (ctrl_io_led[i]) {
+#line 63
+      val |= 1;
+    }
+#line 65
+    i --;
+  }
+#line 67
+  simio_led = (int volatile   )val;
+#line 68
+  return;
+}
+}
+#line 70 "lift_io.c"
+void ctrl_get_vals(void) 
+{ int i ;
+  int in0 ;
+  int in1 ;
+  int in2 ;
+
+  {
+#line 71
+  i = 0;
+#line 71
+  in0 = (int )simio_in;
+#line 71
+  in1 = ctrl_dly1;
+#line 71
+  in2 = ctrl_dly2;
+#line 73
+  ctrl_dly2 = ctrl_dly1;
+#line 74
+  ctrl_dly1 = in0;
+#line 77
+  while (i < 10) {
+#line 78
+    ctrl_io_in[i] = ((in0 & 1) + (in1 & 1)) + (in2 & 1) > 1;
+#line 79
+    in0 >>= 1;
+#line 80
+    in1 >>= 1;
+#line 81
+    in2 >>= 1;
+#line 82
+    i ++;
+  }
+#line 84
+  ctrl_io_analog[0] = (int )simio_adc1;
+#line 85
+  ctrl_io_analog[1] = (int )simio_adc2;
+#line 86
+  ctrl_io_analog[2] = (int )simio_adc3;
+#line 87
+  return;
+}
+}
+#line 1 "cil-lx9cldkt.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-IXP4bNEI.i","")
+#line 28 "main.c"
+void controller(void) 
+{ 
+
+  {
+#line 29
+  ctrl_get_vals();
+#line 30
+  ctrl_loop();
+#line 31
+  ctrl_set_vals();
+#line 32
+  return;
+}
+}
+#line 34 "main.c"
+int main(void) 
+{ 
+
+  {
+#line 37
+  ctrl_init();
+#line 38
+  controller();
+#line 39
+  return (0);
+}
+}
diff -urN joplift/lift-rand.c joplift.new/lift-rand.c
--- joplift/lift-rand.c	1970-01-01 01:00:00.000000000 +0100
+++ joplift.new/lift-rand.c	2010-11-25 20:07:50.000000000 +0100
@@ -0,0 +1,1214 @@
+/* Generated by CIL v. 1.3.6 */
+/* print_CIL_Input is true */
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <assert.h>
+
+void __CrestInt(int * var) {
+  *var = rand() % 100;
+}
+
+#line 1 "cil-Wzef8oRV.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-pHCjtUiZ.i","")
+#line 32 "lift_io.h"
+int ctrl_io_in[10] ;
+#line 33
+int ctrl_io_out[4] ;
+#line 35
+int ctrl_io_led[14] ;
+#line 44
+void io_init(void) ;
+#line 78 "lift_control.h"
+int levelPos[14]  ;
+#line 79 "lift_control.h"
+int one_level  ;
+#line 80 "lift_control.h"
+int cntValid  ;
+#line 81 "lift_control.h"
+int cnt  ;
+#line 82 "lift_control.h"
+int level  ;
+#line 83 "lift_control.h"
+int loadLevel  ;
+#line 84 "lift_control.h"
+int loadPending  ;
+#line 85 "lift_control.h"
+int loadSensor  ;
+#line 86 "lift_control.h"
+int cmd  ;
+#line 87 "lift_control.h"
+int timMotor  ;
+#line 88 "lift_control.h"
+int timImp  ;
+#line 89 "lift_control.h"
+int directionUp  ;
+#line 90 "lift_control.h"
+int lastImp  ;
+#line 91 "lift_control.h"
+int dbgCnt  ;
+#line 92 "lift_control.h"
+int endCnt  ;
+#line 95
+int checkRun(void) ;
+#line 96
+void waitForMotorStart(void) ;
+#line 97
+void doCmd(void) ;
+#line 98
+void doImpuls(int val , int motor , int reset ) ;
+#line 99
+void checkCmd(void) ;
+#line 100
+void checkLevel(void) ;
+#line 101
+void ctrl_loop(void) ;
+#line 202 "crest.h"
+extern void __CrestInt(int *x )  __attribute__((__crest_skip__)) ;
+#line 33 "lift_control.c"
+int newLevel  ;
+#line 88 "lift_control.c"
+void ctrl_init(void) 
+{ int i ;
+  int tmp ;
+  int tmp___0 ;
+  int tmp___1 ;
+  int tmp___2 ;
+  int tmp___3 ;
+  int tmp___4 ;
+  int tmp___5 ;
+  int tmp___6 ;
+  int tmp___7 ;
+  int tmp___8 ;
+  int tmp___9 ;
+  int tmp___10 ;
+  int tmp___11 ;
+  int tmp___12 ;
+  int tmp___13 ;
+  int tmp___14 ;
+
+  {
+#line 90
+  i = 0;
+#line 91
+  io_init();
+#line 92
+  __CrestInt(& cntValid);
+#line 93
+  __CrestInt(& cnt);
+#line 94
+  __CrestInt(& cmd);
+#line 95
+  __CrestInt(& timMotor);
+#line 96
+  __CrestInt(& timImp);
+#line 97
+  __CrestInt(& directionUp);
+#line 98
+  __CrestInt(& lastImp);
+#line 99
+  __CrestInt(& loadLevel);
+#line 100
+  __CrestInt(& loadPending);
+#line 101
+  __CrestInt(& loadSensor);
+#line 102
+  tmp = i;
+#line 102
+  i ++;
+#line 102
+  __CrestInt(& levelPos[tmp]);
+#line 103
+  tmp___0 = i;
+#line 103
+  i ++;
+#line 103
+  __CrestInt(& levelPos[tmp___0]);
+#line 104
+  tmp___1 = i;
+#line 104
+  i ++;
+#line 104
+  __CrestInt(& levelPos[tmp___1]);
+#line 105
+  tmp___2 = i;
+#line 105
+  i ++;
+#line 105
+  __CrestInt(& levelPos[tmp___2]);
+#line 106
+  tmp___3 = i;
+#line 106
+  i ++;
+#line 106
+  __CrestInt(& levelPos[tmp___3]);
+#line 107
+  tmp___4 = i;
+#line 107
+  i ++;
+#line 107
+  __CrestInt(& levelPos[tmp___4]);
+#line 108
+  tmp___5 = i;
+#line 108
+  i ++;
+#line 108
+  __CrestInt(& levelPos[tmp___5]);
+#line 109
+  tmp___6 = i;
+#line 109
+  i ++;
+#line 109
+  __CrestInt(& levelPos[tmp___6]);
+#line 110
+  tmp___7 = i;
+#line 110
+  i ++;
+#line 110
+  __CrestInt(& levelPos[tmp___7]);
+#line 111
+  tmp___8 = i;
+#line 111
+  i ++;
+#line 111
+  __CrestInt(& levelPos[tmp___8]);
+#line 112
+  tmp___9 = i;
+#line 112
+  i ++;
+#line 112
+  __CrestInt(& levelPos[tmp___9]);
+#line 113
+  tmp___10 = i;
+#line 113
+  i ++;
+#line 113
+  __CrestInt(& levelPos[tmp___10]);
+#line 114
+  tmp___11 = i;
+#line 114
+  i ++;
+#line 114
+  __CrestInt(& levelPos[tmp___11]);
+#line 115
+  tmp___12 = i;
+#line 115
+  i ++;
+#line 115
+  __CrestInt(& levelPos[tmp___12]);
+#line 116
+  tmp___13 = i;
+#line 116
+  i ++;
+#line 116
+  __CrestInt(& levelPos[tmp___13]);
+#line 117
+  tmp___14 = i;
+#line 117
+  i ++;
+#line 117
+  __CrestInt(& levelPos[tmp___14]);
+#line 118
+  one_level = levelPos[1];
+#line 119
+  return;
+}
+}
+#line 121 "lift_control.c"
+void ctrl_loop(void) 
+{ int checkLevel_i ;
+  int checkLevel_middle ;
+  int run ;
+
+  {
+#line 122
+  checkLevel_i = 0;
+#line 122
+  checkLevel_middle = 0;
+#line 122
+  run = 0;
+#line 124
+  if (cmd == 0) {
+#line 127
+    if (loadPending) {
+#line 128
+      if (ctrl_io_in[2]) {
+#line 129
+        cmd = 1;
+      }
+    } else {
+#line 131
+      if (ctrl_io_in[4]) {
+#line 132
+        if (! ctrl_io_in[1]) {
+#line 133
+          if (level != 14) {
+#line 134
+            cmd = 3;
+          }
+        }
+      } else {
+#line 137
+        if (ctrl_io_in[5]) {
+#line 138
+          if (! ctrl_io_in[2]) {
+#line 139
+            if (level != 1) {
+#line 140
+              cmd = 4;
+            }
+          }
+        } else {
+#line 143
+          if (ctrl_io_in[8]) {
+#line 144
+            if (loadLevel != 0) {
+#line 145
+              if (level < loadLevel) {
+#line 146
+                cmd = 1;
+              } else {
+#line 149
+                cmd = 2;
+              }
+            } else {
+#line 152
+              cmd = 2;
+            }
+#line 154
+            loadPending = 1;
+#line 155
+            loadSensor = 0;
+          } else {
+#line 156
+            if (ctrl_io_in[6]) {
+#line 157
+              if (! ctrl_io_in[1]) {
+#line 158
+                cmd = 1;
+              }
+            } else {
+#line 160
+              if (ctrl_io_in[7]) {
+#line 161
+                if (! ctrl_io_in[2]) {
+#line 162
+                  cmd = 2;
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+#line 165
+    if (cmd != 0) {
+#line 166
+      timMotor = 50;
+    }
+  } else {
+#line 173
+    if (ctrl_io_in[0]) {
+#line 174
+      if (! lastImp) {
+#line 175
+        if (ctrl_io_out[0]) {
+#line 176
+          if (directionUp) {
+#line 177
+            cnt ++;
+          } else {
+#line 179
+            cnt --;
+          }
+        } else {
+#line 182
+          if (timImp > 0) {
+#line 183
+            if (directionUp) {
+#line 184
+              cnt ++;
+            } else {
+#line 186
+              cnt --;
+            }
+          }
+        }
+      }
+    }
+#line 191
+    if (ctrl_io_in[2]) {
+#line 192
+      cnt = 0;
+#line 193
+      cntValid = 1;
+    }
+#line 195
+    lastImp = ctrl_io_in[0];
+#line 196
+    if (timImp > 0) {
+#line 197
+      timImp --;
+#line 198
+      if (timImp == 0) {
+#line 199
+        if (cmd != 0) {
+#line 200
+          cmd = 0;
+        }
+      }
+    }
+#line 207
+    if (timMotor > 0) {
+#line 209
+      timMotor --;
+#line 210
+      if (cmd == 3) {
+#line 211
+        directionUp = 1;
+      } else {
+#line 213
+        if (cmd == 1) {
+#line 214
+          directionUp = 1;
+        }
+      }
+#line 216
+      ctrl_io_out[1] = directionUp;
+#line 217
+      if (! cntValid) {
+#line 218
+        cnt = 0;
+#line 219
+        if (cmd == 3) {
+#line 220
+          endCnt = one_level;
+        } else {
+#line 222
+          endCnt = - one_level;
+        }
+      } else {
+#line 225
+        endCnt = cnt;
+#line 226
+        newLevel = -99;
+#line 227
+        if (cmd == 3) {
+#line 228
+          newLevel = level + 1;
+        } else {
+#line 229
+          if (cmd == 4) {
+#line 230
+            newLevel = level - 1;
+          }
+        }
+#line 232
+        newLevel --;
+#line 233
+        if (newLevel >= 0) {
+#line 234
+          if (newLevel < 14) {
+#line 235
+            endCnt = levelPos[newLevel];
+          }
+        }
+      }
+    } else {
+#line 241
+      run = 0;
+#line 243
+      if (cmd == 3) {
+#line 244
+        if (cnt < endCnt - 1) {
+#line 246
+          if (! ctrl_io_in[1]) {
+#line 247
+            run = 1;
+            goto RETURN_checkRun;
+          }
+        }
+      } else {
+#line 251
+        if (cmd == 4) {
+#line 252
+          if (cnt > endCnt + 1) {
+#line 254
+            if (! ctrl_io_in[2]) {
+#line 255
+              run = 1;
+              goto RETURN_checkRun;
+            }
+          }
+        } else {
+#line 259
+          if (cmd == 1) {
+#line 260
+            if (loadPending) {
+#line 261
+              if (ctrl_io_in[3]) {
+#line 263
+                loadLevel = level;
+#line 264
+                loadPending = 0;
+#line 265
+                run = 0;
+                goto RETURN_checkRun;
+              }
+            }
+#line 269
+            if (! ctrl_io_in[1]) {
+#line 271
+              run = 1;
+              goto RETURN_checkRun;
+            }
+#line 275
+            loadPending = 0;
+          } else {
+#line 276
+            if (cmd == 2) {
+#line 277
+              if (loadPending) {
+#line 278
+                if (loadSensor) {
+#line 279
+                  if (! ctrl_io_in[3]) {
+#line 280
+                    loadSensor = 0;
+#line 282
+                    loadPending = 0;
+#line 283
+                    loadLevel = level;
+#line 284
+                    run = 0;
+                    goto RETURN_checkRun;
+                  }
+                }
+#line 288
+                loadSensor = ctrl_io_in[3];
+              }
+#line 290
+              if (! ctrl_io_in[2]) {
+#line 292
+                run = 1;
+                goto RETURN_checkRun;
+              }
+            }
+          }
+        }
+      }
+#line 296
+      run = 0;
+      RETURN_checkRun: 
+#line 300
+      if (ctrl_io_out[0]) {
+#line 301
+        if (! run) {
+#line 303
+          cmd = 99;
+#line 304
+          timImp = 50;
+        }
+      }
+#line 307
+      ctrl_io_out[0] = run;
+    }
+  }
+#line 314
+  checkLevel_middle = one_level >> 2;
+#line 315
+  if (cntValid) {
+#line 316
+    level = 1;
+#line 317
+    while (level < 14) {
+#line 318
+      if (cnt < levelPos[level] - checkLevel_middle) {
+#line 319
+        break;
+      }
+#line 321
+      level ++;
+    }
+  } else {
+#line 324
+    level = 0;
+  }
+#line 326
+  checkLevel_i = 0;
+#line 327
+  while (checkLevel_i < 14) {
+#line 328
+    ctrl_io_led[checkLevel_i] = checkLevel_i == level - 1;
+#line 329
+    checkLevel_i ++;
+  }
+#line 333
+  ctrl_io_led[13] = (dbgCnt & 128) != 0;
+#line 334
+  dbgCnt ++;
+#line 341
+  return;
+}
+}
+#line 347 "lift_control.c"
+void checkLevel(void) 
+{ int i ;
+  int middle ;
+
+  {
+#line 349
+  i = 0;
+#line 350
+  middle = one_level >> 2;
+#line 351
+  if (cntValid) {
+#line 352
+    level = 1;
+#line 352
+    while (level < 14) {
+#line 353
+      if (cnt < levelPos[level] - middle) {
+#line 354
+        break;
+      }
+#line 352
+      level ++;
+    }
+  } else {
+#line 358
+    level = 0;
+  }
+#line 360
+  i = 0;
+#line 360
+  while (i < 14) {
+#line 361
+    ctrl_io_led[i] = i == level - 1;
+#line 360
+    i ++;
+  }
+#line 363
+  return;
+}
+}
+#line 368 "lift_control.c"
+void checkCmd(void) 
+{ 
+
+  {
+#line 371
+  if (loadPending) {
+#line 372
+    if (ctrl_io_in[2]) {
+#line 373
+      cmd = 1;
+    }
+  } else {
+#line 375
+    if (ctrl_io_in[4]) {
+#line 376
+      if (! ctrl_io_in[1]) {
+#line 376
+        if (level != 14) {
+#line 377
+          cmd = 3;
+        }
+      }
+    } else {
+#line 379
+      if (ctrl_io_in[5]) {
+#line 380
+        if (! ctrl_io_in[2]) {
+#line 380
+          if (level != 1) {
+#line 381
+            cmd = 4;
+          }
+        }
+      } else {
+#line 383
+        if (ctrl_io_in[8]) {
+#line 384
+          if (loadLevel != 0) {
+#line 384
+            if (level < loadLevel) {
+#line 385
+              cmd = 1;
+            } else {
+#line 387
+              cmd = 2;
+            }
+          } else {
+#line 387
+            cmd = 2;
+          }
+#line 389
+          loadPending = 1;
+#line 390
+          loadSensor = 0;
+        } else {
+#line 391
+          if (ctrl_io_in[6]) {
+#line 392
+            if (! ctrl_io_in[1]) {
+#line 393
+              cmd = 1;
+            }
+          } else {
+#line 395
+            if (ctrl_io_in[7]) {
+#line 396
+              if (! ctrl_io_in[2]) {
+#line 397
+                cmd = 2;
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+#line 400
+  if (cmd != 0) {
+#line 401
+    timMotor = 50;
+  }
+#line 403
+  return;
+}
+}
+#line 405 "lift_control.c"
+void doImpuls(int val , int motor , int reset ) 
+{ 
+
+  {
+#line 407
+  if (val) {
+#line 407
+    if (! lastImp) {
+#line 408
+      if (motor) {
+        goto _L;
+      } else {
+#line 408
+        if (timImp > 0) {
+          _L: /* CIL Label */ 
+#line 409
+          if (directionUp) {
+#line 410
+            cnt ++;
+          } else {
+#line 412
+            cnt --;
+          }
+        }
+      }
+    }
+  }
+#line 416
+  if (reset) {
+#line 417
+    cnt = 0;
+#line 418
+    cntValid = 1;
+  }
+#line 420
+  lastImp = val;
+#line 421
+  if (timImp > 0) {
+#line 422
+    timImp --;
+#line 423
+    if (timImp == 0) {
+#line 423
+      if (cmd != 0) {
+#line 424
+        cmd = 0;
+      }
+    }
+  }
+#line 427
+  return;
+}
+}
+#line 430 "lift_control.c"
+void doCmd(void) 
+{ int tmp ;
+  int run ;
+
+  {
+#line 432
+  if (timMotor > 0) {
+#line 434
+    timMotor --;
+#line 435
+    if (cmd == 3) {
+#line 435
+      tmp = 1;
+    } else {
+#line 435
+      if (cmd == 1) {
+#line 435
+        tmp = 1;
+      } else {
+#line 435
+        tmp = 0;
+      }
+    }
+#line 435
+    directionUp = tmp;
+#line 436
+    ctrl_io_out[1] = directionUp;
+#line 437
+    if (! cntValid) {
+#line 438
+      cnt = 0;
+#line 439
+      if (cmd == 3) {
+#line 440
+        endCnt = one_level;
+      } else {
+#line 442
+        endCnt = - one_level;
+      }
+    } else {
+#line 445
+      endCnt = cnt;
+#line 446
+      newLevel = -99;
+#line 447
+      if (cmd == 3) {
+#line 448
+        newLevel = level + 1;
+      } else {
+#line 449
+        if (cmd == 4) {
+#line 450
+          newLevel = level - 1;
+        }
+      }
+#line 452
+      newLevel --;
+#line 453
+      if (newLevel >= 0) {
+#line 453
+        if (newLevel < 14) {
+#line 454
+          endCnt = levelPos[newLevel];
+        }
+      }
+    }
+  } else {
+#line 458
+    run = 0;
+#line 460
+    if (cmd == 3) {
+#line 461
+      if (cnt < endCnt - 1) {
+#line 461
+        if (! ctrl_io_in[1]) {
+#line 462
+          run = 1;
+        }
+      }
+    } else {
+#line 463
+      if (cmd == 4) {
+#line 464
+        if (cnt > endCnt + 1) {
+#line 464
+          if (! ctrl_io_in[2]) {
+#line 465
+            run = 1;
+          }
+        }
+      } else {
+#line 466
+        if (cmd == 1) {
+#line 467
+          if (loadPending) {
+#line 467
+            if (ctrl_io_in[3]) {
+#line 469
+              loadLevel = level;
+#line 470
+              loadPending = 0;
+#line 471
+              run = 0;
+            }
+          }
+#line 473
+          if (! ctrl_io_in[1]) {
+#line 474
+            run = 1;
+          }
+#line 476
+          loadPending = 0;
+        } else {
+#line 477
+          if (cmd == 2) {
+#line 478
+            if (loadPending) {
+#line 479
+              if (loadSensor) {
+#line 480
+                if (! ctrl_io_in[3]) {
+#line 481
+                  loadSensor = 0;
+#line 483
+                  loadPending = 0;
+#line 484
+                  loadLevel = level;
+#line 485
+                  run = 0;
+                }
+              }
+#line 488
+              loadSensor = ctrl_io_in[3];
+            }
+#line 490
+            if (! ctrl_io_in[2]) {
+#line 491
+              run = 1;
+            }
+          }
+        }
+      }
+    }
+#line 493
+    run = 0;
+#line 496
+    if (ctrl_io_out[0]) {
+#line 496
+      if (! run) {
+#line 498
+        cmd = 99;
+#line 499
+        timImp = 50;
+      }
+    }
+#line 501
+    ctrl_io_out[0] = run;
+  }
+#line 503
+  return;
+}
+}
+#line 505 "lift_control.c"
+void waitForMotorStart(void) 
+{ int tmp ;
+
+  {
+#line 507
+  timMotor --;
+#line 508
+  if (cmd == 3) {
+#line 508
+    tmp = 1;
+  } else {
+#line 508
+    if (cmd == 1) {
+#line 508
+      tmp = 1;
+    } else {
+#line 508
+      tmp = 0;
+    }
+  }
+#line 508
+  directionUp = tmp;
+#line 509
+  ctrl_io_out[1] = directionUp;
+#line 510
+  if (! cntValid) {
+#line 511
+    cnt = 0;
+#line 512
+    if (cmd == 3) {
+#line 513
+      endCnt = one_level;
+    } else {
+#line 515
+      endCnt = - one_level;
+    }
+  } else {
+#line 518
+    endCnt = cnt;
+#line 519
+    newLevel = -99;
+#line 520
+    if (cmd == 3) {
+#line 521
+      newLevel = level + 1;
+    } else {
+#line 522
+      if (cmd == 4) {
+#line 523
+        newLevel = level - 1;
+      }
+    }
+#line 525
+    newLevel --;
+#line 526
+    if (newLevel >= 0) {
+#line 526
+      if (newLevel < 14) {
+#line 527
+        endCnt = levelPos[newLevel];
+      }
+    }
+  }
+#line 530
+  return;
+}
+}
+#line 532 "lift_control.c"
+int checkRun(void) 
+{ 
+
+  {
+#line 534
+  if (cmd == 3) {
+#line 535
+    if (cnt < endCnt - 1) {
+#line 535
+      if (! ctrl_io_in[1]) {
+#line 536
+        return (1);
+      }
+    }
+  } else {
+#line 537
+    if (cmd == 4) {
+#line 538
+      if (cnt > endCnt + 1) {
+#line 538
+        if (! ctrl_io_in[2]) {
+#line 539
+          return (1);
+        }
+      }
+    } else {
+#line 540
+      if (cmd == 1) {
+#line 541
+        if (loadPending) {
+#line 541
+          if (ctrl_io_in[3]) {
+#line 543
+            loadLevel = level;
+#line 544
+            loadPending = 0;
+#line 545
+            return (0);
+          }
+        }
+#line 547
+        if (! ctrl_io_in[1]) {
+#line 548
+          return (1);
+        }
+#line 550
+        loadPending = 0;
+      } else {
+#line 551
+        if (cmd == 2) {
+#line 552
+          if (loadPending) {
+#line 553
+            if (loadSensor) {
+#line 554
+              if (! ctrl_io_in[3]) {
+#line 555
+                loadSensor = 0;
+#line 557
+                loadPending = 0;
+#line 558
+                loadLevel = level;
+#line 559
+                return (0);
+              }
+            }
+#line 562
+            loadSensor = ctrl_io_in[3];
+          }
+#line 564
+          if (! ctrl_io_in[2]) {
+#line 565
+            return (1);
+          }
+        }
+      }
+    }
+  }
+#line 567
+  return (0);
+}
+}
+#line 1 "cil-VW0xGFO5.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-rwNZ36Gq.i","")
+#line 32 "lift_io.h"
+int ctrl_io_in[10]  ;
+#line 33 "lift_io.h"
+int ctrl_io_out[4]  ;
+#line 34 "lift_io.h"
+int ctrl_io_analog[4]  ;
+#line 35 "lift_io.h"
+int ctrl_io_led[14]  ;
+#line 36 "lift_io.h"
+int ctrl_dly1  ;
+#line 36 "lift_io.h"
+int ctrl_dly2  ;
+#line 39 "lift_io.h"
+int volatile   simio_in  ;
+#line 40 "lift_io.h"
+int volatile   simio_out  ;
+#line 41 "lift_io.h"
+int volatile   simio_led  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc1  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc2  ;
+#line 42 "lift_io.h"
+int volatile   simio_adc3  ;
+#line 45
+void ctrl_get_vals(void) ;
+#line 46
+void ctrl_set_vals(void) ;
+#line 42 "lift_io.c"
+void io_init(void) 
+{ 
+
+  {
+#line 44
+  __CrestInt(& ctrl_dly1);
+#line 45
+  __CrestInt(& ctrl_dly2);
+#line 46
+  return;
+}
+}
+#line 48 "lift_io.c"
+void ctrl_set_vals(void) 
+{ int val ;
+  int i ;
+
+  {
+#line 49
+  val = 0;
+#line 49
+  i = 3;
+#line 51
+  while (i >= 0) {
+#line 52
+    val <<= 1;
+#line 53
+    if (ctrl_io_out[i]) {
+#line 54
+      val |= 1;
+    }
+#line 56
+    i --;
+  }
+#line 58
+  simio_out = (int volatile   )val;
+#line 59
+  i = 13;
+#line 60
+  while (i >= 0) {
+#line 61
+    val <<= 1;
+#line 62
+    if (ctrl_io_led[i]) {
+#line 63
+      val |= 1;
+    }
+#line 65
+    i --;
+  }
+#line 67
+  simio_led = (int volatile   )val;
+#line 68
+  return;
+}
+}
+#line 70 "lift_io.c"
+void ctrl_get_vals(void) 
+{ int i ;
+  int in0 ;
+  int in1 ;
+  int in2 ;
+
+  {
+#line 71
+  i = 0;
+#line 71
+  in0 = (int )simio_in;
+#line 71
+  in1 = ctrl_dly1;
+#line 71
+  in2 = ctrl_dly2;
+#line 73
+  ctrl_dly2 = ctrl_dly1;
+#line 74
+  ctrl_dly1 = in0;
+#line 77
+  while (i < 10) {
+#line 78
+    ctrl_io_in[i] = ((in0 & 1) + (in1 & 1)) + (in2 & 1) > 1;
+#line 79
+    in0 >>= 1;
+#line 80
+    in1 >>= 1;
+#line 81
+    in2 >>= 1;
+#line 82
+    i ++;
+  }
+#line 84
+  ctrl_io_analog[0] = (int )simio_adc1;
+#line 85
+  ctrl_io_analog[1] = (int )simio_adc2;
+#line 86
+  ctrl_io_analog[2] = (int )simio_adc3;
+#line 87
+  return;
+}
+}
+#line 1 "cil-lx9cldkt.o"
+#pragma merger(0,"/var/folders/QW/QW-FgS6dGbWpJrI+MIac1E+++TI/-Tmp-/cil-IXP4bNEI.i","")
+#line 28 "main.c"
+void controller(void) 
+{ 
+
+  {
+#line 29
+  ctrl_get_vals();
+#line 30
+  ctrl_loop();
+#line 31
+  ctrl_set_vals();
+#line 32
+  return;
+}
+}
+#line 34 "main.c"
+int main(int argc, char* argv[]) 
+{ 
+  assert(argc == 2);
+  int i=0;
+  sscanf(argv[1], "%d", &i);
+  assert(i > 0);
+  srand(0);
+  {
+    for(; i>0; --i) {
+#line 37
+  ctrl_init();
+#line 38
+  controller();
+    }
+#line 39
+  return (0);
+}
+}
